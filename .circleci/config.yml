version: 2
workflows:
    version: 2
    test:
        jobs:
            - test-3.6
            - test-3.5
            - test-2.7
            - test-3.7-no-ml
jobs:
    test-3.6: &test-template
        docker:
            - image: python:3.6
        working_directory: ~/repo
        resource_class: medium+
        steps:
            - checkout
            - run:
                  name: Setup venv
                  command: python -m venv venv || virtualenv venv
            - restore_cache:
                  keys:
                      - v3-dependencies-{{ checksum "setup.py" }}-{{ checksum "requirements_dev.txt" }}-{{ checksum "install-ml.py" }}
                      - v3-dependencies-
            - run:
                  name: Install dependencies
                  command: |
                      . venv/bin/activate
                      apt-get update && apt-get install -y libsndfile1
                      pip install -r requirements_dev.txt
                      pip install torch
                      pip install torchvision tensorflow
                      pip install -e .[dev]
            - save_cache:
                  paths:
                      - ./venv
                  key: v3-dependencies-{{ checksum "setup.py" }}-{{ checksum "requirements_dev.txt" }}-{{ checksum "install-ml.py" }}
            - run:
                  name: Run tests
                  command: |
                      . venv/bin/activate
                      mkdir -p results
                      pytest --cov=wandb --junitxml="results/pytest.xml"
            - store_test_results:
                  path: results
    test-3.5:
        <<: *test-template
        docker:
            - image: python:3.5
    test-2.7:
        <<: *test-template
        resource_class: xlarge # installing torch takes a ton of ram
        docker:
            - image: python:2.7
    test-3.7-no-ml:
        <<: *test-template
        docker:
            - image: python:3.7
        steps:
            - checkout
            - run:
                  name: Setup venv
                  command: python -m venv venv || virtualenv venv
            - restore_cache:
                  keys:
                      - v3-dependencies-no-ml-{{ checksum "setup.py" }}-{{ checksum "requirements_noml.txt" }}
                      - v3-dependencies-no-ml
            - run:
                  name: Install dependencies
                  command: |
                      . venv/bin/activate
                      pip install -r requirements_noml.txt
                      pip install -e .[dev]
            - save_cache:
                  paths:
                      - ./venv
                  key: v3-dependencies-no-ml-{{ checksum "setup.py" }}-{{ checksum "requirements_noml.txt" }}
            - run:
                  name: Run tests
                  command: |
                      . venv/bin/activate
                      mkdir -p results
                      export NO_ML=true
                      pytest --cov=wandb --junitxml="results/pytest.xml" tests/test_headless.py tests/test_cli.py tests/test_wandb.py
            - store_test_results:
                  path: results
